--PROBLEM 1
/**
Table: Customer

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| customer_id   | int     |
| name          | varchar |
| visited_on    | date    |
| amount        | int     |
+---------------+---------+
In SQL,(customer_id, visited_on) is the primary key for this table.
This table contains data about customer transactions in a restaurant.
visited_on is the date on which the customer with ID (customer_id) has visited the restaurant.
amount is the total paid by a customer.
 

You are the restaurant owner and you want to analyze a possible expansion (there will be at least one customer every day).

Compute the moving average of how much the customer paid in a seven days window (i.e., current day + 6 days before). average_amount should be rounded to two decimal places.

Return the result table ordered by visited_on in ascending order.
**/

--SOLUTION

with cte as (
select visited_on, sum(amount) as tot_sum
from customer
group by 1
order by 1 asc
)
select visited_on, 
sum(tot_sum) over(rows between 6 preceding and current row) as amount,
round(avg(tot_sum) over(rows between 6 preceding and current row),2) as average_amount
from cte
offset 6

--PROBLEM 2
/**
Table: Employee

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| id           | int     |
| name         | varchar |
| salary       | int     |
| departmentId | int     |
+--------------+---------+
id is the primary key (column with unique values) for this table.
departmentId is a foreign key (reference columns) of the ID from the Department table.
Each row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.
 

Table: Department

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| id          | int     |
| name        | varchar |
+-------------+---------+
id is the primary key (column with unique values) for this table. It is guaranteed that department name is not NULL.
Each row of this table indicates the ID of a department and its name.
 

Write a solution to find employees who have the highest salary in each of the departments.

Return the result table in any order.
**/

--SOLUTION

with cte as (
select b.name as department, a.name as employee, salary,
max(salary) over(partition by b.name) as max_salary
from employee as a
join department as b on a.departmentid = b.id
)
select department, employee, salary
from cte
where salary = max_salary

--PROBLEM 3
/**
Table: Delivery

+-----------------------------+---------+
| Column Name                 | Type    |
+-----------------------------+---------+
| delivery_id                 | int     |
| customer_id                 | int     |
| order_date                  | date    |
| customer_pref_delivery_date | date    |
+-----------------------------+---------+
delivery_id is the column of unique values of this table.
The table holds information about food delivery to customers that make orders at some date and specify a preferred delivery date (on the same order date or after it).
 

If the customer's preferred delivery date is the same as the order date, then the order is called immediate; otherwise, it is called scheduled.

The first order of a customer is the order with the earliest order date that the customer made. It is guaranteed that a customer has precisely one first order.

Write a solution to find the percentage of immediate orders in the first orders of all customers, rounded to 2 decimal places.
**/

--SOLUTION

with cte as (
select *,
first_value(order_date) over(partition by customer_id order by order_date asc) as fv
from delivery
)
,df as (
select order_date, customer_pref_delivery_date,
case when order_date = customer_pref_delivery_date then 1 else 0 end as delivery
from cte
where fv = order_date
)
select round(sum(delivery) * 100.0 / COUNT(delivery) ,2) as immediate_percentage 
from df

--PROBLEM 4
/**
Table: Scores

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| student_id  | int     |
| subject     | varchar |
| score       | int     |
| exam_date   | varchar |
+-------------+---------+
(student_id, subject, exam_date) is the primary key for this table.
Each row contains information about a student's score in a specific subject on a particular exam date. score is between 0 and 100 (inclusive).
Write a solution to find the students who have shown improvement. A student is considered to have shown improvement if they meet both of these conditions:

Have taken exams in the same subject on at least two different dates
Their latest score in that subject is higher than their first score
Return the result table ordered by student_id, subject in ascending order.
**/

--SOLUTION

-- Write your PostgreSQL query statement below
WITH temp AS(
    SELECT DISTINCT student_id, subject, 
    FIRST_VALUE(score) OVER(PARTITION BY student_id, subject ORDER BY exam_date) first_score,
    LAST_VALUE(score) OVER(PARTITION BY student_id, subject ORDER BY exam_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) latest_score,
    COUNT(student_id) OVER(PARTITION BY student_id, subject) diff_dates
    FROM Scores
)
SELECT 
    student_id, subject ,first_score, latest_score
FROM temp
WHERE first_score < latest_score AND  diff_dates > 1
ORDER BY student_id, subject
